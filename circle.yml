defaults:

  environment-info: &environment-info
    run:
      name: "Environment info"
      command: |
        echo CXX: $CXX
        $CXX --version
        $CXX --version > compiler.version

  update-submodules: &update-submodules
    run:
      name: "Update git submodules"
      command: |
        git submodule update --init --recursive

  install-mips64: &install-mips64
    run:
      name: "Install mips64 toolchain"
      command: |
        sudo apt -q update
        sudo apt -qy install g++-mips64-linux-gnuabi64 qemu

  configure: &configure
    run:
      name: "Configure"
      # Build "out-of-source" to have better coverage report
      # (ninja is using relative paths otherwise).
      working_directory: ~/build
      command: |
        cmake ../project -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=/tmp/local $CMAKE_OPTIONS

  build: &build
    run:
      name: "Build"
      working_directory: ~/build
      command: |
        cmake --build . -- -j $BUILD_PARALLEL_JOBS
        cmake --build . --target install

  test: &test
    run:
      name: "Test"
      working_directory: ~/build
      command: |
        test/unittests/ethash-test

  test-cmake-config: &test-cmake-config
    run:
      name: "Test CMake config"
      working_directory: ~/project/test/integration/cmake-config
      command: |
        cmake -DCMAKE_PREFIX_PATH=/tmp/local .
        cmake --build .
        ./ethash-cmake-config-test

  test-mips64: &test-mips64
    run:
      name: "Test (mips64)"
      working_directory: ~/build
      command: |
        qemu-mips64 -L /usr/mips64-linux-gnuabi64 test/unittests/ethash-test

  upload-coverage-data: &upload-coverage-data
    run:
      name: "Upload coverage data"
      command: |
        codecov --required --gcov-exec "$GCOV" --gcov-root ~/build


  macos-defaults: &macos-defaults
    environment:
      - CXX: clang++
      - CC:  clang
      - BUILD_PARALLEL_JOBS: 2
    steps:
      - run:
          name: "Install CMake"
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install -q cmake ninja
      - run:
          name: "Install Python3"
          # Python3 and requests are needed for Hunter upload.
          command: |
            export HOMEBREW_NO_AUTO_UPDATE=1
            if ! brew install -q python3; then
              brew upgrade -q python
            fi
            pip3 install -q requests
      - checkout
      - *update-submodules
      - *configure
      - *build
      - *test


version: 2
jobs:

  linux-clang5:
    environment:
      - CXX: clang++-5.0
      - CC:  clang-5.0
      - BUILD_PARALLEL_JOBS: 2
      - TEST_PARALLEL_JOBS: 2
    docker:
      - image: ethereum/cpp-build-env
    steps:
      - checkout
      - *update-submodules
      - *configure
      - *build
      - *test
      - *test-cmake-config

  linux-gcc6-coverage:
    environment:
      - CXX: g++-6
      - CC:  gcc-6
      - GCOV: gcov-6
      - BUILD_PARALLEL_JOBS: 2
      - TEST_PARALLEL_JOBS: 2
      - CMAKE_OPTIONS: -DCOVERAGE=ON
    docker:
      - image: ethereum/cpp-build-env
    steps:
      - checkout
      - *update-submodules
      - *configure
      - *build
      - *test
      - *upload-coverage-data

  linux-gcc4.8:
    environment:
      - CXX: g++-4.8
      - CC:  gcc-4.8
      - BUILD_PARALLEL_JOBS: 2
      - CMAKE_OPTIONS: -DETHASH_BUILD_TESTS=OFF
    docker:
      - image: ethereum/cpp-build-env
    steps:
      - checkout
      - *update-submodules
      - *configure
      - *build

  linux-clang3.8:
    environment:
      - CXX: clang++-3.8
      - CC:  clang-3.8
      - BUILD_PARALLEL_JOBS: 2
      - CMAKE_OPTIONS: -DETHASH_BUILD_TESTS=OFF
    docker:
      - image: ethereum/cpp-build-env:experimental
    steps:
      - checkout
      - *update-submodules
      - *configure
      - *build

  mips64:
    environment:
      - BUILD_PARALLEL_JOBS: 2
      - TEST_PARALLEL_JOBS: 2
      - CMAKE_OPTIONS: -DTOOLCHAIN=mips64 -DCMAKE_EXE_LINKER_FLAGS=-static
    docker:
      - image: ethereum/cpp-build-env
    steps:
      - checkout
      - *update-submodules
      - *install-mips64
      - *configure
      - run:
          name: "Build ethash-test for mips64"
          working_directory: ~/build
          command: |
            cmake --build . --target ethash-test -- -j $BUILD_PARALLEL_JOBS
      - store_artifacts:
          path: ~/build/test/unittests/ethash-test
          destination: ethash-test
      - run:
          name: "Test mips64"
          working_directory: ~/build
          command: |  # Software emulation in qemu will not handle threads.
            qemu-mips64 test/unittests/ethash-test --gtest_filter='-*_multithreaded.*'


  macos-xcode93:
    <<: *macos-defaults
    macos:
      xcode: "9.3.0"

  macos-xcode90:
    <<: *macos-defaults
    macos:
      xcode: "9.0"

  macos-xcode83:
    <<: *macos-defaults
    macos:
      xcode: "8.3.3"


workflows:
  version: 2
  ethash:
    jobs:
      - linux-gcc6-coverage
      - linux-clang5
      - linux-gcc4.8
      - linux-clang3.8
      - mips64
      - macos-xcode93
      - macos-xcode90
      - macos-xcode83
